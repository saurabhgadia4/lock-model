Script started on Sat 11 Jul 2015 02:06:56 AM PDT
]0;saurabh@saurabh-Inspiron-N5010: ~/model_checking/new2-lockmodel/lock-modelsaurabh@saurabh-Inspiron-N5010:~/model_checking/new2-lockmodel/lock-model$ ./jpf.sh 
JavaPathfinder core system v8.0 (rev 25+) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
harness.Environment.main()

====================================================== search started: 7/11/15 2:07 AM
Thread 0 has priority 3 and uses locks 0, and 1.
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:2 acquiring mutex 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
thread-id:2 acquiring mutex 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
thread-id:2 acquiring mutex 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
thread-id:2 acquiring mutex 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :2 in waitQ of mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:2 acquiring mutex 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
thread-id:2 acquiring mutex 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
thread-id:2 acquiring mutex 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
thread-id:2 acquiring mutex 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
------>Thread-id: 2 priority: 2
------>Thread-id: 2 priority: 2
------>Thread-id: 2 priority: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Adding thread :2 in waitQ of mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1

====================================================== error 1
gov.nasa.jpf.listener.PreciseRaceDetector
race for field harness.TestThread@18f.currentPriority
  Thread-1 at rtems.Mutex.unlock(Mutex.java:104)
		"thisThread.currentPriority = priorityBefore;"  WRITE: putfield rtems.RTEMSThread.currentPriority
  Thread-2 at rtems.Mutex.updateRecPriority(Mutex.java:211)
		"if(holder.currentPriority > priority)"  READ:  getfield rtems.RTEMSThread.currentPriority


====================================================== trace #1
------------------------------------------------------ transition #0 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"ROOT" ,1/1,isCascaded:false}
      [3157 insn w/o sources]
  harness/Environment.java:18    : static final Lock[] locks = {createLock(0), createLock(1), createLock(2)};
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
      [1 insn w/o sources]
  rtems/Mutex.java:8             : public class Mutex extends Lock {
      [2 insn w/o sources]
  rtems/Mutex.java:8             : public class Mutex extends Lock {
  rtems/Mutex.java:17            : public static int USE_MODEL=NONREC_UPDATE;
  rtems/Mutex.java:1             : package rtems;
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  rtems/Mutex.java:20            : public Mutex(int idx){
  base/Lock.java:3               : public class Lock {
      [1 insn w/o sources]
  base/Lock.java:5               : int count = 0;
  rtems/Mutex.java:12            : int priorityBefore=-1;
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:242           : class MyComparator implements Comparator<RTEMSThread>
      [1 insn w/o sources]
  rtems/Mutex.java:242           : class MyComparator implements Comparator<RTEMSThread>
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
      [26 insn w/o sources]
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
  rtems/Mutex.java:22            : this.id = idx;
  rtems/Mutex.java:23            : this.nestCount = 0;
  rtems/Mutex.java:24            : this.priorityBefore = -1;
  rtems/Mutex.java:25            : this.holder=null;
  rtems/Mutex.java:26            : }
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  harness/Environment.java:18    : static final Lock[] locks = {createLock(0), createLock(1), createLock(2)};
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  rtems/Mutex.java:20            : public Mutex(int idx){
  base/Lock.java:3               : public class Lock {
      [1 insn w/o sources]
  base/Lock.java:5               : int count = 0;
  rtems/Mutex.java:12            : int priorityBefore=-1;
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:242           : class MyComparator implements Comparator<RTEMSThread>
      [1 insn w/o sources]
  rtems/Mutex.java:242           : class MyComparator implements Comparator<RTEMSThread>
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
      [26 insn w/o sources]
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
  rtems/Mutex.java:22            : this.id = idx;
  rtems/Mutex.java:23            : this.nestCount = 0;
  rtems/Mutex.java:24            : this.priorityBefore = -1;
  rtems/Mutex.java:25            : this.holder=null;
  rtems/Mutex.java:26            : }
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  harness/Environment.java:18    : static final Lock[] locks = {createLock(0), createLock(1), createLock(2)};
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  rtems/Mutex.java:20            : public Mutex(int idx){
  base/Lock.java:3               : public class Lock {
      [1 insn w/o sources]
  base/Lock.java:5               : int count = 0;
  rtems/Mutex.java:12            : int priorityBefore=-1;
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:242           : class MyComparator implements Comparator<RTEMSThread>
      [1 insn w/o sources]
  rtems/Mutex.java:242           : class MyComparator implements Comparator<RTEMSThread>
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
      [26 insn w/o sources]
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
  rtems/Mutex.java:22            : this.id = idx;
  rtems/Mutex.java:23            : this.nestCount = 0;
  rtems/Mutex.java:24            : this.priorityBefore = -1;
  rtems/Mutex.java:25            : this.holder=null;
  rtems/Mutex.java:26            : }
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  harness/Environment.java:18    : static final Lock[] locks = {createLock(0), createLock(1), createLock(2)};
  harness/Environment.java:1     : package harness;
      [1 insn w/o sources]
  harness/Environment.java:29    : int li1 = 0;
  harness/Environment.java:30    : int li2 = 1;
  harness/Environment.java:31    : Mutex.setUpdateMethod(model);
  rtems/Mutex.java:30            : USE_MODEL = method;
  rtems/Mutex.java:31            : }
  harness/Environment.java:32    : RTEMSThread t0 = new TestThread(new int[]{li1, li2}, 3);
      [1 insn w/o sources]
  rtems/RTEMSThread.java:7       : public class RTEMSThread extends Thread {
      [2 insn w/o sources]
  rtems/RTEMSThread.java:7       : public class RTEMSThread extends Thread {
  rtems/RTEMSThread.java:1       : package rtems;
      [1 insn w/o sources]
  harness/TestThread.java:7      : public class TestThread extends RTEMSThread {
      [2 insn w/o sources]
  harness/TestThread.java:7      : public class TestThread extends RTEMSThread {
  harness/TestThread.java:1      : package harness;
  harness/Environment.java:32    : RTEMSThread t0 = new TestThread(new int[]{li1, li2}, 3);
  harness/TestThread.java:12     : super(priority);
  rtems/RTEMSThread.java:17      : public RTEMSThread(int priority) {
      [145 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
      [9 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
      [16 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
  rtems/RTEMSThread.java:19      : this.state = this.getState();
      [9 insn w/o sources]
  rtems/RTEMSThread.java:19      : this.state = this.getState();
  rtems/RTEMSThread.java:20      : this.setPriority(priority);
      [15 insn w/o sources]
  rtems/RTEMSThread.java:21      : this.currentPriority = this.realPriority = this.getPriority();
      [3 insn w/o sources]
  rtems/RTEMSThread.java:21      : this.currentPriority = this.realPriority = this.getPriority();
  rtems/RTEMSThread.java:23      : this.trylock = null;
  rtems/RTEMSThread.java:24      : }
  harness/TestThread.java:13     : idx = lockIdx;
  harness/TestThread.java:14     : locks = new Lock[idx.length];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:16     : locks[i] = Environment.locks[idx[i]];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:16     : locks[i] = Environment.locks[idx[i]];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:18     : }
  harness/Environment.java:32    : RTEMSThread t0 = new TestThread(new int[]{li1, li2}, 3);
  harness/Environment.java:34    : t0.setPriority(3);
      [15 insn w/o sources]
  harness/Environment.java:35    : t0.setRealPriority(3);
  rtems/RTEMSThread.java:31      : realPriority = priority;
  rtems/RTEMSThread.java:32      : }
  harness/Environment.java:36    : t0.setCurrentPriority(3);
  rtems/RTEMSThread.java:27      : currentPriority = priority;
  rtems/RTEMSThread.java:28      : }
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [3 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:40    : t0.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #1 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  harness/Environment.java:43    : RTEMSThread t1 = new TestThread(new int[]{0}, 2);
  harness/TestThread.java:12     : super(priority);
  rtems/RTEMSThread.java:17      : public RTEMSThread(int priority) {
      [27 insn w/o sources]
------------------------------------------------------ transition #2 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
      [119 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
      [16 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
------------------------------------------------------ transition #3 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/2,isCascaded:false}
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
  rtems/RTEMSThread.java:19      : this.state = this.getState();
      [9 insn w/o sources]
  rtems/RTEMSThread.java:19      : this.state = this.getState();
  rtems/RTEMSThread.java:20      : this.setPriority(priority);
      [15 insn w/o sources]
  rtems/RTEMSThread.java:21      : this.currentPriority = this.realPriority = this.getPriority();
      [3 insn w/o sources]
  rtems/RTEMSThread.java:21      : this.currentPriority = this.realPriority = this.getPriority();
  rtems/RTEMSThread.java:23      : this.trylock = null;
  rtems/RTEMSThread.java:24      : }
  harness/TestThread.java:13     : idx = lockIdx;
  harness/TestThread.java:14     : locks = new Lock[idx.length];
------------------------------------------------------ transition #4 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/2,isCascaded:false}
  harness/TestThread.java:14     : locks = new Lock[idx.length];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:16     : locks[i] = Environment.locks[idx[i]];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:18     : }
  harness/Environment.java:43    : RTEMSThread t1 = new TestThread(new int[]{0}, 2);
  harness/Environment.java:44    : t1.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #5 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,2/3,isCascaded:false}
      [1 insn w/o sources]
  harness/TestThread.java:1      : package harness;
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #6 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #7 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #8 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #9 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
  rtems/Mutex.java:34            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:34            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:35            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #10 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:35            : while((holder!=null) && (holder!=thisThread))
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
------------------------------------------------------ transition #11 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:73            : assert thisThread.getState() != Thread.State.WAITING;
      [9 insn w/o sources]
  rtems/Mutex.java:73            : assert thisThread.getState() != Thread.State.WAITING;
  rtems/Mutex.java:74            : if(holder==null)
------------------------------------------------------ transition #12 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:74            : if(holder==null)
  rtems/Mutex.java:77            : holder = thisThread;
------------------------------------------------------ transition #13 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:77            : holder = thisThread;
  rtems/Mutex.java:78            : holder.pushMutex(this);
------------------------------------------------------ transition #14 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:78            : holder.pushMutex(this);
  rtems/RTEMSThread.java:39      : assert !(mutexOrderList.contains(this));
------------------------------------------------------ transition #15 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:39      : assert !(mutexOrderList.contains(this));
      [10 insn w/o sources]
------------------------------------------------------ transition #16 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
  rtems/RTEMSThread.java:39      : assert !(mutexOrderList.contains(this));
  rtems/RTEMSThread.java:40      : obj.priorityBefore = currentPriority;
------------------------------------------------------ transition #17 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:40      : obj.priorityBefore = currentPriority;
------------------------------------------------------ transition #18 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:40      : obj.priorityBefore = currentPriority;
  rtems/RTEMSThread.java:41      : mutexOrderList.add(0, obj);
------------------------------------------------------ transition #19 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:41      : mutexOrderList.add(0, obj);
      [6 insn w/o sources]
------------------------------------------------------ transition #20 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #21 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #22 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
------------------------------------------------------ transition #23 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
      [14 insn w/o sources]
------------------------------------------------------ transition #24 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #25 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #26 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [9 insn w/o sources]
------------------------------------------------------ transition #27 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [22 insn w/o sources]
------------------------------------------------------ transition #28 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #29 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
      [44 insn w/o sources]
------------------------------------------------------ transition #30 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [1 insn w/o sources]
------------------------------------------------------ transition #31 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #32 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #33 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #34 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #35 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #36 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #37 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
  rtems/RTEMSThread.java:42      : assert wait == null;
------------------------------------------------------ transition #38 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:42      : assert wait == null;
  rtems/RTEMSThread.java:43      : assert trylock == null;
------------------------------------------------------ transition #39 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:43      : assert trylock == null;
  rtems/RTEMSThread.java:44      : }
  rtems/Mutex.java:79            : assert nestCount==0;
------------------------------------------------------ transition #40 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:79            : assert nestCount==0;
  rtems/Mutex.java:81            : nestCount++;
------------------------------------------------------ transition #41 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:81            : nestCount++;
------------------------------------------------------ transition #42 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:81            : nestCount++;
  rtems/Mutex.java:82            : thisThread.resourceCount++;
------------------------------------------------------ transition #43 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:82            : thisThread.resourceCount++;
------------------------------------------------------ transition #44 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:82            : thisThread.resourceCount++;
  rtems/Mutex.java:84            : }
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #45 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #46 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #47 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #48 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
  rtems/Mutex.java:34            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:34            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:35            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #49 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:35            : while((holder!=null) && (holder!=thisThread))
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
------------------------------------------------------ transition #50 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:72            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:73            : assert thisThread.getState() != Thread.State.WAITING;
      [9 insn w/o sources]
  rtems/Mutex.java:73            : assert thisThread.getState() != Thread.State.WAITING;
  rtems/Mutex.java:74            : if(holder==null)
------------------------------------------------------ transition #51 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:74            : if(holder==null)
  rtems/Mutex.java:77            : holder = thisThread;
------------------------------------------------------ transition #52 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:77            : holder = thisThread;
  rtems/Mutex.java:78            : holder.pushMutex(this);
------------------------------------------------------ transition #53 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:78            : holder.pushMutex(this);
  rtems/RTEMSThread.java:39      : assert !(mutexOrderList.contains(this));
------------------------------------------------------ transition #54 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:39      : assert !(mutexOrderList.contains(this));
      [10 insn w/o sources]
------------------------------------------------------ transition #55 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #56 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [15 insn w/o sources]
------------------------------------------------------ transition #57 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
  rtems/RTEMSThread.java:39      : assert !(mutexOrderList.contains(this));
  rtems/RTEMSThread.java:40      : obj.priorityBefore = currentPriority;
------------------------------------------------------ transition #58 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:40      : obj.priorityBefore = currentPriority;
------------------------------------------------------ transition #59 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:40      : obj.priorityBefore = currentPriority;
  rtems/RTEMSThread.java:41      : mutexOrderList.add(0, obj);
------------------------------------------------------ transition #60 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:41      : mutexOrderList.add(0, obj);
      [6 insn w/o sources]
------------------------------------------------------ transition #61 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #62 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #63 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
------------------------------------------------------ transition #64 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #65 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #66 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #67 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #68 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #69 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #70 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #71 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #72 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #73 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
  rtems/RTEMSThread.java:42      : assert wait == null;
------------------------------------------------------ transition #74 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:42      : assert wait == null;
  rtems/RTEMSThread.java:43      : assert trylock == null;
------------------------------------------------------ transition #75 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/RTEMSThread.java:43      : assert trylock == null;
  rtems/RTEMSThread.java:44      : }
  rtems/Mutex.java:79            : assert nestCount==0;
------------------------------------------------------ transition #76 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:79            : assert nestCount==0;
  rtems/Mutex.java:81            : nestCount++;
------------------------------------------------------ transition #77 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:81            : nestCount++;
------------------------------------------------------ transition #78 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:81            : nestCount++;
  rtems/Mutex.java:82            : thisThread.resourceCount++;
------------------------------------------------------ transition #79 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:82            : thisThread.resourceCount++;
------------------------------------------------------ transition #80 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:82            : thisThread.resourceCount++;
  rtems/Mutex.java:84            : }
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #81 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:24     : for (int i = idx.length-1; i>= 0; i--) {
------------------------------------------------------ transition #82 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:24     : for (int i = idx.length-1; i>= 0; i--) {
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #83 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #84 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #85 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
  rtems/Mutex.java:87            : Mutex topMutex=null;
  rtems/Mutex.java:88            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:88            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:91            : assert nestCount>0;
------------------------------------------------------ transition #86 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:91            : assert nestCount>0;
  rtems/Mutex.java:92            : assert thisThread.resourceCount>0;
------------------------------------------------------ transition #87 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:92            : assert thisThread.resourceCount>0;
  rtems/Mutex.java:93            : nestCount--;
------------------------------------------------------ transition #88 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:93            : nestCount--;
------------------------------------------------------ transition #89 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:93            : nestCount--;
  rtems/Mutex.java:94            : thisThread.resourceCount--;
------------------------------------------------------ transition #90 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:94            : thisThread.resourceCount--;
------------------------------------------------------ transition #91 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:94            : thisThread.resourceCount--;
  rtems/Mutex.java:95            : if(nestCount==0)
------------------------------------------------------ transition #92 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:95            : if(nestCount==0)
  rtems/Mutex.java:97            : topMutex = thisThread.mutexOrderList.get(0);
------------------------------------------------------ transition #93 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:97            : topMutex = thisThread.mutexOrderList.get(0);
      [6 insn w/o sources]
------------------------------------------------------ transition #94 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #95 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:97            : topMutex = thisThread.mutexOrderList.get(0);
  rtems/Mutex.java:98            : assert this==topMutex;
  rtems/Mutex.java:99            : topMutex = thisThread.mutexOrderList.remove(0);
------------------------------------------------------ transition #96 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:99            : topMutex = thisThread.mutexOrderList.remove(0);
      [6 insn w/o sources]
------------------------------------------------------ transition #97 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #98 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #99 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #100 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #101 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [10 insn w/o sources]
------------------------------------------------------ transition #102 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #103 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #104 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #105 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #106 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:99            : topMutex = thisThread.mutexOrderList.remove(0);
  rtems/Mutex.java:103           : thisThread.setPriority(priorityBefore);
------------------------------------------------------ transition #107 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:103           : thisThread.setPriority(priorityBefore);
      [15 insn w/o sources]
  rtems/Mutex.java:104           : thisThread.currentPriority = priorityBefore;
------------------------------------------------------ transition #108 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:104           : thisThread.currentPriority = priorityBefore;
------------------------------------------------------ transition #109 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
      [1 insn w/o sources]
  harness/TestThread.java:1      : package harness;
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #110 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #111 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #112 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,3/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #113 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,3/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
  rtems/Mutex.java:34            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:34            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:35            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #114 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  rtems/Mutex.java:35            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #115 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  rtems/Mutex.java:35            : while((holder!=null) && (holder!=thisThread))
  rtems/Mutex.java:37            : assert (thisThread.currentPriority == thisThread.getPriority());
------------------------------------------------------ transition #116 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  rtems/Mutex.java:37            : assert (thisThread.currentPriority == thisThread.getPriority());
      [3 insn w/o sources]
  rtems/Mutex.java:37            : assert (thisThread.currentPriority == thisThread.getPriority());
  rtems/Mutex.java:39            : thisThread.state = Thread.State.WAITING;
------------------------------------------------------ transition #117 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  rtems/Mutex.java:39            : thisThread.state = Thread.State.WAITING;
  rtems/Mutex.java:58            : updatePriority(thisThread.currentPriority);
------------------------------------------------------ transition #118 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  rtems/Mutex.java:58            : updatePriority(thisThread.currentPriority);
  rtems/Mutex.java:157           : if(USE_MODEL==REC_UPDATE)
------------------------------------------------------ transition #119 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,3/3,isCascaded:false}
  rtems/Mutex.java:157           : if(USE_MODEL==REC_UPDATE)
  rtems/Mutex.java:159           : updateRecPriority(priority);
  rtems/Mutex.java:191           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:191           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:192           : int mutexIdx = this.holder.getMutexIndex(this);
------------------------------------------------------ transition #120 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  rtems/Mutex.java:192           : int mutexIdx = this.holder.getMutexIndex(this);
  rtems/RTEMSThread.java:35      : return mutexOrderList.indexOf(obj);
------------------------------------------------------ transition #121 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  rtems/RTEMSThread.java:35      : return mutexOrderList.indexOf(obj);
      [7 insn w/o sources]
------------------------------------------------------ transition #122 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #123 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #124 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,3/3,isCascaded:false}
      [11 insn w/o sources]
  rtems/RTEMSThread.java:35      : return mutexOrderList.indexOf(obj);
  rtems/Mutex.java:192           : int mutexIdx = this.holder.getMutexIndex(this);
  rtems/Mutex.java:193           : int stopflag = 0;
  rtems/Mutex.java:194           : assert this.holder!=null;
------------------------------------------------------ transition #125 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  rtems/Mutex.java:194           : assert this.holder!=null;
  rtems/Mutex.java:195           : assert this.holder!= thisThread;
------------------------------------------------------ transition #126 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  rtems/Mutex.java:195           : assert this.holder!= thisThread;
  rtems/Mutex.java:197           : assert mutexIdx!=-1;
  rtems/Mutex.java:198           : for(i=mutexIdx-1;i>=0;i--)
  rtems/Mutex.java:207           : if(stopflag==0){
  rtems/Mutex.java:211           : if(holder.currentPriority > priority)
------------------------------------------------------ transition #127 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  rtems/Mutex.java:211           : if(holder.currentPriority > priority)
------------------------------------------------------ transition #128 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/3,isCascaded:false}
      [1 insn w/o sources]

====================================================== snapshot #1
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at java.lang.Thread.start(Thread.java)
	at harness.Environment.main(Environment.java:44)

thread harness.TestThread:{id:1,name:Thread-1,status:RUNNING,priority:3,isDaemon:false,lockCount:0,suspendCount:0}
  owned locks:rtems.Mutex@181
  call stack:
	at rtems.Mutex.unlock(Mutex.java:104)
	at harness.TestThread.run(TestThread.java:25)

thread harness.TestThread:{id:2,name:Thread-2,status:RUNNING,priority:2,isDaemon:false,lockCount:0,suspendCount:0}
  owned locks:rtems.Mutex@165
  call stack:
	at rtems.Mutex.updateRecPriority(Mutex.java:211)
	at rtems.Mutex.updatePriority(Mutex.java:159)
	at rtems.Mutex.lock(Mutex.java:58)
	at harness.TestThread.run(TestThread.java:22)


====================================================== results
error #1: gov.nasa.jpf.listener.PreciseRaceDetector "race for field harness.TestThread@18f.currentPrior..."

====================================================== statistics
elapsed time:       00:00:02
states:             new=1931,visited=3226,backtracked=5028,end=1859
search:             maxDepth=309,constraints=0
choice generators:  thread=1865 (signal=27,lock=76,sharedRef=1583,threadApi=26,reschedule=153), data=0
heap:               new=1757,released=6139,maxLive=471,gcCycles=5089
instructions:       39728
max memory:         102MB
loaded code:        classes=76,methods=1776

====================================================== search finished: 7/11/15 2:07 AM
]0;saurabh@saurabh-Inspiron-N5010: ~/model_checking/new2-lockmodel/lock-modelsaurabh@saurabh-Inspiron-N5010:~/model_checking/new2-lockmodel/lock-model$ exit
exit

Script done on Sat 11 Jul 2015 02:07:05 AM PDT
