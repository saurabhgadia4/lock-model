Script started on Sun 05 Jul 2015 10:39:17 PM PDT
]0;saurabh@saurabh-Inspiron-N5010: ~/model_checking/new2-lockmodel/lock-modelsaurabh@saurabh-Inspiron-N5010:~/model_checking/new2-lockmodel/lock-model$ ./jpf.sh 
JavaPathfinder core system v8.0 (rev 25+) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
harness.Environment.main()

====================================================== search started: 7/5/15 10:39 PM
setting priority = 3 for thread: 1
Thread 0 has priority 3 and uses locks 0, and 1.
setting priority = 2 for thread: 2
setting priority = 1 for thread: 3
thread-id:1 acquiring mutex 0
thread: 1adding mutex: 0 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 2 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 2 priority: 2
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
Adding thread :3 in waitQ of mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 0
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
------>Thread-id: 2 priority: 2
------>Thread-id: 2 priority: 2
------>Thread-id: 2 priority: 2
------>Thread-id: 2 priority: 2
------>Thread-id: 2 priority: 2
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 2 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 2 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 2 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 2 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 2 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 2 while releasing mutex: 1
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 2 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread: 2adding mutex: 0 to its mutexOrderList
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :2 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
thread: 2 being re-enqued by thread: 3
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
--->Mutex: 2
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :2 in waitQ of mutex: 0
Adding thread :3 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 3 priority: 1
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:2 acquiring mutex 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
------>Thread-id: 2 priority: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :2 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 3 being re-enqued by thread: 2
Adding thread :2 in waitQ of mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:2 acquiring mutex 2
thread: 2adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 0
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:2 acquiring mutex 0
thread: 2adding mutex: 0 to its mutexOrderList
Adding thread :1 in waitQ of mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 0
thread: 1adding mutex: 0 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
thread-id:3 acquiring mutex 0
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 1 while releasing mutex: 1
--->Mutex: 0
------>Thread-id: 3 priority: 1
Holder Thread: 1before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
thread-id:3 acquiring mutex 0
thread: 3adding mutex: 0 to its mutexOrderList
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 0
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 0
--->Mutex: 2
Holder Thread: 3before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 3 after stepdown ops-->current priority: 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
--->Mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread: 1adding mutex: 1 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
thread-id:1 acquiring mutex 1
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 0
--->Mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Adding thread :3 in waitQ of mutex: 2
Holder Thread: 2before resetting priority_before : 1 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
Adding thread :3 in waitQ of mutex: 2
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
Holder Thread: 2before resetting priority_before : 2 while releasing mutex: 2
Holder Thread: 2 after stepdown ops-->current priority: 2 while releasing mutex: 2
thread-id:1 acquiring mutex 0
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:3 acquiring mutex 2
thread: 3adding mutex: 2 to its mutexOrderList
thread-id:1 acquiring mutex 0
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread: 1adding mutex: 0 to its mutexOrderList
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread-id:1 acquiring mutex 0
thread: 1adding mutex: 0 to its mutexOrderList
thread-id:1 acquiring mutex 1
thread: 1adding mutex: 1 to its mutexOrderList
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 1
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 1
--->Mutex: 0
Holder Thread: 1before resetting priority_before : 3 while releasing mutex: 0
Holder Thread: 1 after stepdown ops-->current priority: 3 while releasing mutex: 0

====================================================== error 1
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
java.lang.AssertionError
	at rtems.Mutex.updateRecPriority(Mutex.java:204)
	at rtems.Mutex.updatePriority(Mutex.java:168)
	at rtems.Mutex.lock(Mutex.java:60)
	at harness.TestThread.run(TestThread.java:22)


====================================================== trace #1
------------------------------------------------------ transition #0 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"ROOT" ,1/1,isCascaded:false}
      [3157 insn w/o sources]
  harness/Environment.java:18    : static final Lock[] locks = {createLock(0), createLock(1), createLock(2)};
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
      [1 insn w/o sources]
  rtems/Mutex.java:8             : public class Mutex extends Lock {
      [2 insn w/o sources]
  rtems/Mutex.java:8             : public class Mutex extends Lock {
  rtems/Mutex.java:15            : static Object globalLock = new Object(); // models kernel-wide lock
      [1 insn w/o sources]
  rtems/Mutex.java:15            : static Object globalLock = new Object(); // models kernel-wide lock
  rtems/Mutex.java:18            : public static int USE_MODEL=NONREC_UPDATE;
  rtems/Mutex.java:1             : package rtems;
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  rtems/Mutex.java:21            : public Mutex(int idx){
  base/Lock.java:3               : public class Lock {
      [1 insn w/o sources]
  base/Lock.java:5               : int count = 0;
  rtems/Mutex.java:12            : int priorityBefore=-1;
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:249           : class MyComparator implements Comparator<RTEMSThread>
      [1 insn w/o sources]
  rtems/Mutex.java:249           : class MyComparator implements Comparator<RTEMSThread>
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
      [26 insn w/o sources]
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
  rtems/Mutex.java:23            : this.id = idx;
  rtems/Mutex.java:24            : this.nestCount = 0;
  rtems/Mutex.java:25            : this.priorityBefore = -1;
  rtems/Mutex.java:26            : this.holder=null;
  rtems/Mutex.java:27            : }
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  harness/Environment.java:18    : static final Lock[] locks = {createLock(0), createLock(1), createLock(2)};
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  rtems/Mutex.java:21            : public Mutex(int idx){
  base/Lock.java:3               : public class Lock {
      [1 insn w/o sources]
  base/Lock.java:5               : int count = 0;
  rtems/Mutex.java:12            : int priorityBefore=-1;
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:249           : class MyComparator implements Comparator<RTEMSThread>
      [1 insn w/o sources]
  rtems/Mutex.java:249           : class MyComparator implements Comparator<RTEMSThread>
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
      [26 insn w/o sources]
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
  rtems/Mutex.java:23            : this.id = idx;
  rtems/Mutex.java:24            : this.nestCount = 0;
  rtems/Mutex.java:25            : this.priorityBefore = -1;
  rtems/Mutex.java:26            : this.holder=null;
  rtems/Mutex.java:27            : }
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  harness/Environment.java:18    : static final Lock[] locks = {createLock(0), createLock(1), createLock(2)};
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  rtems/Mutex.java:21            : public Mutex(int idx){
  base/Lock.java:3               : public class Lock {
      [1 insn w/o sources]
  base/Lock.java:5               : int count = 0;
  rtems/Mutex.java:12            : int priorityBefore=-1;
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:249           : class MyComparator implements Comparator<RTEMSThread>
      [1 insn w/o sources]
  rtems/Mutex.java:249           : class MyComparator implements Comparator<RTEMSThread>
  rtems/Mutex.java:13            : MyComparator comparator = new MyComparator();
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
      [26 insn w/o sources]
  rtems/Mutex.java:14            : PriorityQueue<RTEMSThread> waitQueue = new PriorityQueue<RTEMSThread>(7, comparator);
  rtems/Mutex.java:23            : this.id = idx;
  rtems/Mutex.java:24            : this.nestCount = 0;
  rtems/Mutex.java:25            : this.priorityBefore = -1;
  rtems/Mutex.java:26            : this.holder=null;
  rtems/Mutex.java:27            : }
  harness/Environment.java:22    : return new /*Prio*/Mutex(id);
  harness/Environment.java:18    : static final Lock[] locks = {createLock(0), createLock(1), createLock(2)};
  harness/Environment.java:1     : package harness;
      [1 insn w/o sources]
  harness/Environment.java:29    : int li1 = 0;
  harness/Environment.java:30    : int li2 = 1;
  harness/Environment.java:31    : Mutex.setUpdateMethod(model);
  rtems/Mutex.java:31            : USE_MODEL = method;
  rtems/Mutex.java:32            : }
  harness/Environment.java:32    : RTEMSThread t0 = new TestThread(new int[]{li1, li2}, 3);
      [1 insn w/o sources]
  harness/TestThread.java:7      : public class TestThread extends RTEMSThread {
      [2 insn w/o sources]
  harness/TestThread.java:7      : public class TestThread extends RTEMSThread {
  harness/TestThread.java:1      : package harness;
  harness/Environment.java:32    : RTEMSThread t0 = new TestThread(new int[]{li1, li2}, 3);
  harness/TestThread.java:12     : super(priority);
  rtems/RTEMSThread.java:17      : public RTEMSThread(int priority) {
      [145 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
      [9 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
      [16 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
  rtems/RTEMSThread.java:19      : this.state = this.getState();
      [9 insn w/o sources]
  rtems/RTEMSThread.java:19      : this.state = this.getState();
  rtems/RTEMSThread.java:20      : this.setPriority(priority);
      [15 insn w/o sources]
  rtems/RTEMSThread.java:21      : this.currentPriority = this.realPriority = this.getPriority();
      [3 insn w/o sources]
  rtems/RTEMSThread.java:21      : this.currentPriority = this.realPriority = this.getPriority();
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [3 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:23      : this.trylock = null;
  rtems/RTEMSThread.java:24      : }
  harness/TestThread.java:13     : idx = lockIdx;
  harness/TestThread.java:14     : locks = new Lock[idx.length];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:16     : locks[i] = Environment.locks[idx[i]];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:16     : locks[i] = Environment.locks[idx[i]];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:18     : }
  harness/Environment.java:32    : RTEMSThread t0 = new TestThread(new int[]{li1, li2}, 3);
  harness/Environment.java:34    : t0.setPriority(3);
      [15 insn w/o sources]
  harness/Environment.java:35    : t0.setRealPriority(3);
  rtems/RTEMSThread.java:31      : realPriority = priority;
  rtems/RTEMSThread.java:32      : }
  harness/Environment.java:36    : t0.setCurrentPriority(3);
  rtems/RTEMSThread.java:27      : currentPriority = priority;
  rtems/RTEMSThread.java:28      : }
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [3 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:37    : System.out.println("Thread 0 has priority " + t0.getPriority() +
      [2 insn w/o sources]
  harness/Environment.java:40    : t0.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #1 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  harness/Environment.java:43    : RTEMSThread t1 = new TestThread(new int[]{2, 0}, 2);
  harness/TestThread.java:12     : super(priority);
  rtems/RTEMSThread.java:17      : public RTEMSThread(int priority) {
      [27 insn w/o sources]
------------------------------------------------------ transition #2 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
      [119 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
      [16 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
------------------------------------------------------ transition #3 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/2,isCascaded:false}
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
  rtems/RTEMSThread.java:19      : this.state = this.getState();
      [9 insn w/o sources]
  rtems/RTEMSThread.java:19      : this.state = this.getState();
  rtems/RTEMSThread.java:20      : this.setPriority(priority);
      [15 insn w/o sources]
  rtems/RTEMSThread.java:21      : this.currentPriority = this.realPriority = this.getPriority();
      [3 insn w/o sources]
  rtems/RTEMSThread.java:21      : this.currentPriority = this.realPriority = this.getPriority();
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [3 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:23      : this.trylock = null;
  rtems/RTEMSThread.java:24      : }
  harness/TestThread.java:13     : idx = lockIdx;
  harness/TestThread.java:14     : locks = new Lock[idx.length];
------------------------------------------------------ transition #4 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/2,isCascaded:false}
  harness/TestThread.java:14     : locks = new Lock[idx.length];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:16     : locks[i] = Environment.locks[idx[i]];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:16     : locks[i] = Environment.locks[idx[i]];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:18     : }
  harness/Environment.java:43    : RTEMSThread t1 = new TestThread(new int[]{2, 0}, 2);
  harness/Environment.java:44    : t1.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #5 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/3,isCascaded:false}
      [2 insn w/o sources]
  harness/Environment.java:47    : RTEMSThread t2 = new TestThread(new int[]{2, 0}, 1);
  harness/TestThread.java:12     : super(priority);
  rtems/RTEMSThread.java:17      : public RTEMSThread(int priority) {
      [27 insn w/o sources]
------------------------------------------------------ transition #6 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/3,isCascaded:false}
      [119 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
      [16 insn w/o sources]
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
------------------------------------------------------ transition #7 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/3,isCascaded:false}
  rtems/RTEMSThread.java:18      : this.mutexOrderList = /*Collections.synchronizedList(*/new ArrayList<Mutex>()/*)*/;
  rtems/RTEMSThread.java:19      : this.state = this.getState();
      [9 insn w/o sources]
  rtems/RTEMSThread.java:19      : this.state = this.getState();
  rtems/RTEMSThread.java:20      : this.setPriority(priority);
      [15 insn w/o sources]
  rtems/RTEMSThread.java:21      : this.currentPriority = this.realPriority = this.getPriority();
      [3 insn w/o sources]
  rtems/RTEMSThread.java:21      : this.currentPriority = this.realPriority = this.getPriority();
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [3 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:22      : System.out.println("setting priority = "+getPriority() + " for thread: "+getId());
      [2 insn w/o sources]
  rtems/RTEMSThread.java:23      : this.trylock = null;
  rtems/RTEMSThread.java:24      : }
  harness/TestThread.java:13     : idx = lockIdx;
  harness/TestThread.java:14     : locks = new Lock[idx.length];
------------------------------------------------------ transition #8 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/3,isCascaded:false}
  harness/TestThread.java:14     : locks = new Lock[idx.length];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:16     : locks[i] = Environment.locks[idx[i]];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:16     : locks[i] = Environment.locks[idx[i]];
  harness/TestThread.java:15     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:18     : }
  harness/Environment.java:47    : RTEMSThread t2 = new TestThread(new int[]{2, 0}, 1);
  harness/Environment.java:48    : t2.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #9 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,2/4,isCascaded:false}
      [1 insn w/o sources]
  harness/TestThread.java:1      : package harness;
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #10 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #11 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #12 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/4,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #13 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/4,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #14 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,3/4,isCascaded:false}
      [1 insn w/o sources]
  harness/TestThread.java:1      : package harness;
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #15 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/4,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #16 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/4,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #17 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,3/4,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #18 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,3/4,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #19 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,3/4,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #20 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
------------------------------------------------------ transition #21 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:76            : assert thisThread.getState() != Thread.State.WAITING;
      [9 insn w/o sources]
  rtems/Mutex.java:76            : assert thisThread.getState() != Thread.State.WAITING;
  rtems/Mutex.java:77            : if(holder==null)
------------------------------------------------------ transition #22 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:77            : if(holder==null)
  rtems/Mutex.java:79            : holder = thisThread;
------------------------------------------------------ transition #23 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:79            : holder = thisThread;
  rtems/Mutex.java:80            : assert nestCount==0;
------------------------------------------------------ transition #24 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:80            : assert nestCount==0;
  rtems/Mutex.java:82            : if(nestCount==0)
------------------------------------------------------ transition #25 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:82            : if(nestCount==0)
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
------------------------------------------------------ transition #26 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
      [10 insn w/o sources]
------------------------------------------------------ transition #27 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
------------------------------------------------------ transition #28 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
------------------------------------------------------ transition #29 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
------------------------------------------------------ transition #30 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
  rtems/Mutex.java:87            : thisThread.mutexOrderList.add(0, this);
------------------------------------------------------ transition #31 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:87            : thisThread.mutexOrderList.add(0, this);
      [6 insn w/o sources]
------------------------------------------------------ transition #32 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #33 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #34 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
------------------------------------------------------ transition #35 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
      [14 insn w/o sources]
------------------------------------------------------ transition #36 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #37 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #38 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [9 insn w/o sources]
------------------------------------------------------ transition #39 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [22 insn w/o sources]
------------------------------------------------------ transition #40 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #41 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
      [44 insn w/o sources]
------------------------------------------------------ transition #42 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [1 insn w/o sources]
------------------------------------------------------ transition #43 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #44 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #45 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #46 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #47 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #48 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #49 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
------------------------------------------------------ transition #50 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
      [10 insn w/o sources]
------------------------------------------------------ transition #51 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #52 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [17 insn w/o sources]
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
  rtems/Mutex.java:90            : nestCount++;
------------------------------------------------------ transition #53 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:90            : nestCount++;
------------------------------------------------------ transition #54 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:90            : nestCount++;
  rtems/Mutex.java:91            : thisThread.resourceCount++;
------------------------------------------------------ transition #55 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:91            : thisThread.resourceCount++;
------------------------------------------------------ transition #56 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:91            : thisThread.resourceCount++;
  rtems/Mutex.java:92            : }
------------------------------------------------------ transition #57 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,3/4,isCascaded:false}
  rtems/Mutex.java:92            : }
  rtems/Mutex.java:93            : }
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #58 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/4,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #59 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/4,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #60 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,3/4,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #61 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,3/4,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #62 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,3/4,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #63 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
------------------------------------------------------ transition #64 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:76            : assert thisThread.getState() != Thread.State.WAITING;
      [9 insn w/o sources]
  rtems/Mutex.java:76            : assert thisThread.getState() != Thread.State.WAITING;
  rtems/Mutex.java:77            : if(holder==null)
------------------------------------------------------ transition #65 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:77            : if(holder==null)
  rtems/Mutex.java:79            : holder = thisThread;
------------------------------------------------------ transition #66 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:79            : holder = thisThread;
  rtems/Mutex.java:80            : assert nestCount==0;
------------------------------------------------------ transition #67 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:80            : assert nestCount==0;
  rtems/Mutex.java:82            : if(nestCount==0)
------------------------------------------------------ transition #68 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:82            : if(nestCount==0)
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
------------------------------------------------------ transition #69 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
      [10 insn w/o sources]
------------------------------------------------------ transition #70 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #71 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [15 insn w/o sources]
------------------------------------------------------ transition #72 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
------------------------------------------------------ transition #73 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
------------------------------------------------------ transition #74 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
------------------------------------------------------ transition #75 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
  rtems/Mutex.java:87            : thisThread.mutexOrderList.add(0, this);
------------------------------------------------------ transition #76 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:87            : thisThread.mutexOrderList.add(0, this);
      [6 insn w/o sources]
------------------------------------------------------ transition #77 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #78 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #79 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
------------------------------------------------------ transition #80 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #81 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #82 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #83 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #84 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #85 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #86 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #87 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #88 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #89 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
------------------------------------------------------ transition #90 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
      [10 insn w/o sources]
------------------------------------------------------ transition #91 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #92 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [17 insn w/o sources]
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
  rtems/Mutex.java:90            : nestCount++;
------------------------------------------------------ transition #93 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:90            : nestCount++;
------------------------------------------------------ transition #94 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:90            : nestCount++;
  rtems/Mutex.java:91            : thisThread.resourceCount++;
------------------------------------------------------ transition #95 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:91            : thisThread.resourceCount++;
------------------------------------------------------ transition #96 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:91            : thisThread.resourceCount++;
  rtems/Mutex.java:92            : }
------------------------------------------------------ transition #97 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,2/4,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #98 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #99 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
  rtems/Mutex.java:39            : assert (thisThread.currentPriority == thisThread.getPriority());
------------------------------------------------------ transition #100 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:39            : assert (thisThread.currentPriority == thisThread.getPriority());
      [3 insn w/o sources]
  rtems/Mutex.java:39            : assert (thisThread.currentPriority == thisThread.getPriority());
  rtems/Mutex.java:41            : thisThread.state = Thread.State.WAITING;
------------------------------------------------------ transition #101 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:41            : thisThread.state = Thread.State.WAITING;
  rtems/Mutex.java:60            : updatePriority(thisThread.currentPriority);
------------------------------------------------------ transition #102 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:60            : updatePriority(thisThread.currentPriority);
  rtems/Mutex.java:166           : if(USE_MODEL==REC_UPDATE)
------------------------------------------------------ transition #103 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/4,isCascaded:false}
  rtems/Mutex.java:166           : if(USE_MODEL==REC_UPDATE)
  rtems/Mutex.java:168           : updateRecPriority(priority);
  rtems/Mutex.java:200           : int mutexIdx = this.holder.getMutexIndex(this);
------------------------------------------------------ transition #104 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:200           : int mutexIdx = this.holder.getMutexIndex(this);
  rtems/RTEMSThread.java:35      : return mutexOrderList.indexOf(obj);
------------------------------------------------------ transition #105 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/RTEMSThread.java:35      : return mutexOrderList.indexOf(obj);
      [7 insn w/o sources]
------------------------------------------------------ transition #106 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #107 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #108 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/4,isCascaded:false}
      [11 insn w/o sources]
  rtems/RTEMSThread.java:35      : return mutexOrderList.indexOf(obj);
  rtems/Mutex.java:200           : int mutexIdx = this.holder.getMutexIndex(this);
  rtems/Mutex.java:201           : int stopflag = 0;
  rtems/Mutex.java:202           : assert this.holder!=null;
------------------------------------------------------ transition #109 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:202           : assert this.holder!=null;
  rtems/Mutex.java:204           : assert mutexIdx!=-1;
  rtems/Mutex.java:205           : for(i=mutexIdx-1;i>=0;i--)
  rtems/Mutex.java:214           : if(stopflag==0){
  rtems/Mutex.java:218           : if(holder.currentPriority > priority)
------------------------------------------------------ transition #110 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:218           : if(holder.currentPriority > priority)
------------------------------------------------------ transition #111 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:218           : if(holder.currentPriority > priority)
  rtems/Mutex.java:229           : }
  rtems/Mutex.java:168           : updateRecPriority(priority);
  rtems/Mutex.java:174           : if(holder.wait!=null){
------------------------------------------------------ transition #112 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:174           : if(holder.wait!=null){
------------------------------------------------------ transition #113 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:174           : if(holder.wait!=null){
  rtems/Mutex.java:185           : }
  rtems/Mutex.java:61            : if(waitQueue.contains(thisThread)==false){
------------------------------------------------------ transition #114 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:61            : if(waitQueue.contains(thisThread)==false){
      [10 insn w/o sources]
------------------------------------------------------ transition #115 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
      [8 insn w/o sources]
  rtems/Mutex.java:61            : if(waitQueue.contains(thisThread)==false){
  rtems/Mutex.java:62            : System.out.println("Adding thread :" + thisThread.getId() + " in waitQ of mutex: "+id);
      [2 insn w/o sources]
  rtems/Mutex.java:62            : System.out.println("Adding thread :" + thisThread.getId() + " in waitQ of mutex: "+id);
      [2 insn w/o sources]
  rtems/Mutex.java:62            : System.out.println("Adding thread :" + thisThread.getId() + " in waitQ of mutex: "+id);
      [2 insn w/o sources]
  rtems/Mutex.java:62            : System.out.println("Adding thread :" + thisThread.getId() + " in waitQ of mutex: "+id);
      [2 insn w/o sources]
  rtems/Mutex.java:62            : System.out.println("Adding thread :" + thisThread.getId() + " in waitQ of mutex: "+id);
      [2 insn w/o sources]
  rtems/Mutex.java:62            : System.out.println("Adding thread :" + thisThread.getId() + " in waitQ of mutex: "+id);
------------------------------------------------------ transition #116 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:62            : System.out.println("Adding thread :" + thisThread.getId() + " in waitQ of mutex: "+id);
      [2 insn w/o sources]
  rtems/Mutex.java:62            : System.out.println("Adding thread :" + thisThread.getId() + " in waitQ of mutex: "+id);
      [2 insn w/o sources]
  rtems/Mutex.java:62            : System.out.println("Adding thread :" + thisThread.getId() + " in waitQ of mutex: "+id);
      [2 insn w/o sources]
  rtems/Mutex.java:63            : waitQueue.offer(thisThread);
------------------------------------------------------ transition #117 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:63            : waitQueue.offer(thisThread);
      [5 insn w/o sources]
------------------------------------------------------ transition #118 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #119 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #120 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #121 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #122 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #123 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #124 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/4,isCascaded:false}
      [4 insn w/o sources]
  rtems/Mutex.java:63            : waitQueue.offer(thisThread);
  rtems/Mutex.java:65            : thisThread.wait = waitQueue;
------------------------------------------------------ transition #125 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:65            : thisThread.wait = waitQueue;
------------------------------------------------------ transition #126 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:65            : thisThread.wait = waitQueue;
  rtems/Mutex.java:66            : thisThread.trylock = this;
------------------------------------------------------ transition #127 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:66            : thisThread.trylock = this;
  rtems/Mutex.java:67            : validator();
  rtems/Mutex.java:141           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:141           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
------------------------------------------------------ transition #128 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
      [25 insn w/o sources]
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
  rtems/Mutex.java:143           : while (mItr.hasNext()){
      [7 insn w/o sources]
------------------------------------------------------ transition #129 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:143           : while (mItr.hasNext()){
  rtems/Mutex.java:155           : }
  rtems/Mutex.java:68            : globalLock.wait();
------------------------------------------------------ transition #130 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/4,isCascaded:false}
  rtems/Mutex.java:68            : globalLock.wait();
      [1 insn w/o sources]
------------------------------------------------------ transition #131 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"WAIT" ,2/3,isCascaded:false}
  rtems/Mutex.java:92            : }
  rtems/Mutex.java:93            : }
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #132 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:24     : for (int i = idx.length-1; i>= 0; i--) {
------------------------------------------------------ transition #133 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:24     : for (int i = idx.length-1; i>= 0; i--) {
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #134 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #135 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
  rtems/Mutex.java:96            : synchronized(globalLock) {
------------------------------------------------------ transition #136 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
  rtems/Mutex.java:96            : synchronized(globalLock) {
------------------------------------------------------ transition #137 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
  rtems/Mutex.java:96            : synchronized(globalLock) {
  rtems/Mutex.java:97            : Mutex topMutex=null;
  rtems/Mutex.java:98            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:98            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:101           : assert nestCount>0;
------------------------------------------------------ transition #138 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:101           : assert nestCount>0;
  rtems/Mutex.java:102           : assert thisThread.resourceCount>0;
------------------------------------------------------ transition #139 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:102           : assert thisThread.resourceCount>0;
  rtems/Mutex.java:103           : nestCount--;
------------------------------------------------------ transition #140 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:103           : nestCount--;
------------------------------------------------------ transition #141 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:103           : nestCount--;
  rtems/Mutex.java:104           : thisThread.resourceCount--;
------------------------------------------------------ transition #142 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:104           : thisThread.resourceCount--;
------------------------------------------------------ transition #143 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:104           : thisThread.resourceCount--;
  rtems/Mutex.java:105           : if(nestCount==0)
------------------------------------------------------ transition #144 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:105           : if(nestCount==0)
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
------------------------------------------------------ transition #145 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
      [6 insn w/o sources]
------------------------------------------------------ transition #146 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #147 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #148 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
      [3 insn w/o sources]
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
  rtems/Mutex.java:108           : assert this==topMutex;
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
------------------------------------------------------ transition #149 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
      [6 insn w/o sources]
------------------------------------------------------ transition #150 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #151 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #152 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #153 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #154 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #155 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [10 insn w/o sources]
------------------------------------------------------ transition #156 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #157 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #158 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #159 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #160 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #161 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
      [3 insn w/o sources]
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [3 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
------------------------------------------------------ transition #162 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:113           : thisThread.setPriority(priorityBefore);
------------------------------------------------------ transition #163 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:113           : thisThread.setPriority(priorityBefore);
      [15 insn w/o sources]
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
------------------------------------------------------ transition #164 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
------------------------------------------------------ transition #165 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [3 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
------------------------------------------------------ transition #166 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:116           : validator();
  rtems/Mutex.java:141           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:141           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
------------------------------------------------------ transition #167 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
      [25 insn w/o sources]
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
  rtems/Mutex.java:143           : while (mItr.hasNext()){
      [7 insn w/o sources]
------------------------------------------------------ transition #168 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
  rtems/Mutex.java:143           : while (mItr.hasNext()){
  rtems/Mutex.java:144           : chkMtx = mItr.next();
      [5 insn w/o sources]
------------------------------------------------------ transition #169 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [14 insn w/o sources]
------------------------------------------------------ transition #170 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #171 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [17 insn w/o sources]
------------------------------------------------------ transition #172 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
      [2 insn w/o sources]
  rtems/Mutex.java:144           : chkMtx = mItr.next();
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
      [2 insn w/o sources]
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
      [2 insn w/o sources]
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
------------------------------------------------------ transition #173 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
      [2 insn w/o sources]
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
      [2 insn w/o sources]
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
      [2 insn w/o sources]
  rtems/Mutex.java:146           : chkThr = chkMtx.waitQueue.peek();
------------------------------------------------------ transition #174 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:146           : chkThr = chkMtx.waitQueue.peek();
      [2 insn w/o sources]
------------------------------------------------------ transition #175 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:146           : chkThr = chkMtx.waitQueue.peek();
  rtems/Mutex.java:147           : if(chkThr!=null)
  rtems/Mutex.java:143           : while (mItr.hasNext()){
      [7 insn w/o sources]
------------------------------------------------------ transition #176 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:143           : while (mItr.hasNext()){
  rtems/Mutex.java:155           : }
  rtems/Mutex.java:117           : assert holder!=null;
------------------------------------------------------ transition #177 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:117           : assert holder!=null;
  rtems/Mutex.java:118           : assert holder.wait==null;
------------------------------------------------------ transition #178 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:118           : assert holder.wait==null;
------------------------------------------------------ transition #179 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:118           : assert holder.wait==null;
  rtems/Mutex.java:119           : assert holder.trylock==null;
------------------------------------------------------ transition #180 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:119           : assert holder.trylock==null;
------------------------------------------------------ transition #181 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:119           : assert holder.trylock==null;
  rtems/Mutex.java:121           : holder = waitQueue.poll();
------------------------------------------------------ transition #182 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:121           : holder = waitQueue.poll();
      [2 insn w/o sources]
------------------------------------------------------ transition #183 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #184 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #185 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #186 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #187 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #188 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #189 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #190 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #191 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #192 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #193 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:121           : holder = waitQueue.poll();
------------------------------------------------------ transition #194 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:121           : holder = waitQueue.poll();
  rtems/Mutex.java:122           : if(holder != null){
------------------------------------------------------ transition #195 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:122           : if(holder != null){
  rtems/Mutex.java:123           : assert holder.state==Thread.State.WAITING;
------------------------------------------------------ transition #196 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:123           : assert holder.state==Thread.State.WAITING;
------------------------------------------------------ transition #197 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:123           : assert holder.state==Thread.State.WAITING;
  rtems/Mutex.java:124           : holder.state = Thread.State.RUNNABLE;
------------------------------------------------------ transition #198 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:124           : holder.state = Thread.State.RUNNABLE;
------------------------------------------------------ transition #199 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:124           : holder.state = Thread.State.RUNNABLE;
  rtems/Mutex.java:125           : holder.wait = null;
------------------------------------------------------ transition #200 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:125           : holder.wait = null;
------------------------------------------------------ transition #201 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:125           : holder.wait = null;
  rtems/Mutex.java:126           : holder.trylock = null;
------------------------------------------------------ transition #202 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:126           : holder.trylock = null;
------------------------------------------------------ transition #203 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:126           : holder.trylock = null;
  rtems/Mutex.java:127           : globalLock.notifyAll();
------------------------------------------------------ transition #204 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
  rtems/Mutex.java:127           : globalLock.notifyAll();
      [1 insn w/o sources]
------------------------------------------------------ transition #205 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"NOTIFY" ,2/3,isCascaded:false}
      [2 insn w/o sources]
  rtems/Mutex.java:130           : }
------------------------------------------------------ transition #206 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,3/4,isCascaded:false}
  rtems/Mutex.java:130           : }
  rtems/Mutex.java:131           : }
  harness/TestThread.java:24     : for (int i = idx.length-1; i>= 0; i--) {
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #207 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/4,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #208 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,3/4,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
  rtems/Mutex.java:96            : synchronized(globalLock) {
------------------------------------------------------ transition #209 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,3/4,isCascaded:false}
  rtems/Mutex.java:96            : synchronized(globalLock) {
------------------------------------------------------ transition #210 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,3/4,isCascaded:false}
  rtems/Mutex.java:96            : synchronized(globalLock) {
  rtems/Mutex.java:97            : Mutex topMutex=null;
  rtems/Mutex.java:98            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:98            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:101           : assert nestCount>0;
------------------------------------------------------ transition #211 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:101           : assert nestCount>0;
  rtems/Mutex.java:102           : assert thisThread.resourceCount>0;
------------------------------------------------------ transition #212 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:102           : assert thisThread.resourceCount>0;
  rtems/Mutex.java:103           : nestCount--;
------------------------------------------------------ transition #213 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:103           : nestCount--;
------------------------------------------------------ transition #214 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:103           : nestCount--;
  rtems/Mutex.java:104           : thisThread.resourceCount--;
------------------------------------------------------ transition #215 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:104           : thisThread.resourceCount--;
------------------------------------------------------ transition #216 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:104           : thisThread.resourceCount--;
  rtems/Mutex.java:105           : if(nestCount==0)
------------------------------------------------------ transition #217 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:105           : if(nestCount==0)
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
------------------------------------------------------ transition #218 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
      [6 insn w/o sources]
------------------------------------------------------ transition #219 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #220 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #221 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
      [3 insn w/o sources]
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
  rtems/Mutex.java:108           : assert this==topMutex;
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
------------------------------------------------------ transition #222 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
      [6 insn w/o sources]
------------------------------------------------------ transition #223 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #224 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #225 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #226 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #227 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #228 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [10 insn w/o sources]
------------------------------------------------------ transition #229 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #230 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #231 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #232 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
      [3 insn w/o sources]
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [3 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
------------------------------------------------------ transition #233 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:113           : thisThread.setPriority(priorityBefore);
------------------------------------------------------ transition #234 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:113           : thisThread.setPriority(priorityBefore);
      [15 insn w/o sources]
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
------------------------------------------------------ transition #235 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
------------------------------------------------------ transition #236 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [3 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
------------------------------------------------------ transition #237 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:116           : validator();
  rtems/Mutex.java:141           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:141           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
------------------------------------------------------ transition #238 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
      [25 insn w/o sources]
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
  rtems/Mutex.java:143           : while (mItr.hasNext()){
      [7 insn w/o sources]
------------------------------------------------------ transition #239 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:143           : while (mItr.hasNext()){
  rtems/Mutex.java:155           : }
  rtems/Mutex.java:117           : assert holder!=null;
------------------------------------------------------ transition #240 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:117           : assert holder!=null;
  rtems/Mutex.java:118           : assert holder.wait==null;
------------------------------------------------------ transition #241 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:118           : assert holder.wait==null;
------------------------------------------------------ transition #242 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:118           : assert holder.wait==null;
  rtems/Mutex.java:119           : assert holder.trylock==null;
------------------------------------------------------ transition #243 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:119           : assert holder.trylock==null;
------------------------------------------------------ transition #244 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:119           : assert holder.trylock==null;
  rtems/Mutex.java:121           : holder = waitQueue.poll();
------------------------------------------------------ transition #245 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:121           : holder = waitQueue.poll();
      [2 insn w/o sources]
------------------------------------------------------ transition #246 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
  rtems/Mutex.java:121           : holder = waitQueue.poll();
------------------------------------------------------ transition #247 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:121           : holder = waitQueue.poll();
  rtems/Mutex.java:122           : if(holder != null){
------------------------------------------------------ transition #248 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:122           : if(holder != null){
  rtems/Mutex.java:130           : }
------------------------------------------------------ transition #249 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,3/4,isCascaded:false}
  rtems/Mutex.java:130           : }
  rtems/Mutex.java:131           : }
  harness/TestThread.java:24     : for (int i = idx.length-1; i>= 0; i--) {
  harness/TestThread.java:27     : assert currentPriority==realPriority;
------------------------------------------------------ transition #250 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/4,isCascaded:false}
  harness/TestThread.java:27     : assert currentPriority==realPriority;
------------------------------------------------------ transition #251 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/4,isCascaded:false}
  harness/TestThread.java:27     : assert currentPriority==realPriority;
  harness/TestThread.java:28     : }
  harness/TestThread.java:4      : 
------------------------------------------------------ transition #252 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"TERMINATE" ,3/3,isCascaded:false}
      [1 insn w/o sources]
  harness/TestThread.java:1      : package harness;
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #253 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #254 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #255 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,3/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #256 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,3/3,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #257 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,3/3,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #258 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
------------------------------------------------------ transition #259 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:76            : assert thisThread.getState() != Thread.State.WAITING;
      [9 insn w/o sources]
  rtems/Mutex.java:76            : assert thisThread.getState() != Thread.State.WAITING;
  rtems/Mutex.java:77            : if(holder==null)
------------------------------------------------------ transition #260 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:77            : if(holder==null)
  rtems/Mutex.java:79            : holder = thisThread;
------------------------------------------------------ transition #261 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:79            : holder = thisThread;
  rtems/Mutex.java:80            : assert nestCount==0;
------------------------------------------------------ transition #262 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:80            : assert nestCount==0;
  rtems/Mutex.java:82            : if(nestCount==0)
------------------------------------------------------ transition #263 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:82            : if(nestCount==0)
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
------------------------------------------------------ transition #264 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
      [10 insn w/o sources]
------------------------------------------------------ transition #265 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [7 insn w/o sources]
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
------------------------------------------------------ transition #266 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
------------------------------------------------------ transition #267 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
------------------------------------------------------ transition #268 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
  rtems/Mutex.java:87            : thisThread.mutexOrderList.add(0, this);
------------------------------------------------------ transition #269 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:87            : thisThread.mutexOrderList.add(0, this);
      [6 insn w/o sources]
------------------------------------------------------ transition #270 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #271 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #272 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [2 insn w/o sources]
------------------------------------------------------ transition #273 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/2,isCascaded:false}
      [14 insn w/o sources]
------------------------------------------------------ transition #274 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #275 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #276 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [9 insn w/o sources]
------------------------------------------------------ transition #277 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [22 insn w/o sources]
------------------------------------------------------ transition #278 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [36 insn w/o sources]
------------------------------------------------------ transition #279 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [1 insn w/o sources]
------------------------------------------------------ transition #280 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,2/2,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #281 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #282 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #283 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #284 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #285 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #286 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [2 insn w/o sources]
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
------------------------------------------------------ transition #287 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
      [10 insn w/o sources]
------------------------------------------------------ transition #288 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #289 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [17 insn w/o sources]
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
  rtems/Mutex.java:90            : nestCount++;
------------------------------------------------------ transition #290 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:90            : nestCount++;
------------------------------------------------------ transition #291 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:90            : nestCount++;
  rtems/Mutex.java:91            : thisThread.resourceCount++;
------------------------------------------------------ transition #292 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:91            : thisThread.resourceCount++;
------------------------------------------------------ transition #293 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:91            : thisThread.resourceCount++;
  rtems/Mutex.java:92            : }
------------------------------------------------------ transition #294 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,3/3,isCascaded:false}
  rtems/Mutex.java:92            : }
  rtems/Mutex.java:93            : }
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #295 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #296 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,3/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #297 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,3/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #298 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,3/3,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #299 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,3/3,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #300 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #301 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
  rtems/Mutex.java:39            : assert (thisThread.currentPriority == thisThread.getPriority());
------------------------------------------------------ transition #302 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:39            : assert (thisThread.currentPriority == thisThread.getPriority());
      [3 insn w/o sources]
  rtems/Mutex.java:39            : assert (thisThread.currentPriority == thisThread.getPriority());
  rtems/Mutex.java:41            : thisThread.state = Thread.State.WAITING;
------------------------------------------------------ transition #303 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:41            : thisThread.state = Thread.State.WAITING;
  rtems/Mutex.java:60            : updatePriority(thisThread.currentPriority);
------------------------------------------------------ transition #304 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:60            : updatePriority(thisThread.currentPriority);
  rtems/Mutex.java:166           : if(USE_MODEL==REC_UPDATE)
------------------------------------------------------ transition #305 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/2,isCascaded:false}
  rtems/Mutex.java:166           : if(USE_MODEL==REC_UPDATE)
  rtems/Mutex.java:168           : updateRecPriority(priority);
  rtems/Mutex.java:200           : int mutexIdx = this.holder.getMutexIndex(this);
------------------------------------------------------ transition #306 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:200           : int mutexIdx = this.holder.getMutexIndex(this);
  rtems/RTEMSThread.java:35      : return mutexOrderList.indexOf(obj);
------------------------------------------------------ transition #307 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/RTEMSThread.java:35      : return mutexOrderList.indexOf(obj);
      [7 insn w/o sources]
------------------------------------------------------ transition #308 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [4 insn w/o sources]
  rtems/RTEMSThread.java:35      : return mutexOrderList.indexOf(obj);
  rtems/Mutex.java:200           : int mutexIdx = this.holder.getMutexIndex(this);
  rtems/Mutex.java:201           : int stopflag = 0;
  rtems/Mutex.java:202           : assert this.holder!=null;
------------------------------------------------------ transition #309 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  rtems/Mutex.java:202           : assert this.holder!=null;
  rtems/Mutex.java:204           : assert mutexIdx!=-1;
      [21 insn w/o sources]
  rtems/Mutex.java:204           : assert mutexIdx!=-1;
  rtems/Mutex.java:92            : }
------------------------------------------------------ transition #310 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,2/3,isCascaded:false}
      [2 insn w/o sources]
  rtems/Mutex.java:71            : {}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #311 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #312 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
------------------------------------------------------ transition #313 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:76            : assert thisThread.getState() != Thread.State.WAITING;
      [9 insn w/o sources]
  rtems/Mutex.java:76            : assert thisThread.getState() != Thread.State.WAITING;
  rtems/Mutex.java:77            : if(holder==null)
------------------------------------------------------ transition #314 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:77            : if(holder==null)
  rtems/Mutex.java:82            : if(nestCount==0)
------------------------------------------------------ transition #315 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:82            : if(nestCount==0)
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
------------------------------------------------------ transition #316 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
      [10 insn w/o sources]
------------------------------------------------------ transition #317 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
------------------------------------------------------ transition #318 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
------------------------------------------------------ transition #319 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
------------------------------------------------------ transition #320 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
  rtems/Mutex.java:87            : thisThread.mutexOrderList.add(0, this);
------------------------------------------------------ transition #321 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:87            : thisThread.mutexOrderList.add(0, this);
      [6 insn w/o sources]
------------------------------------------------------ transition #322 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #323 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #324 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
------------------------------------------------------ transition #325 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
      [14 insn w/o sources]
------------------------------------------------------ transition #326 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #327 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #328 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [9 insn w/o sources]
------------------------------------------------------ transition #329 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [22 insn w/o sources]
------------------------------------------------------ transition #330 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [36 insn w/o sources]
------------------------------------------------------ transition #331 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [1 insn w/o sources]
------------------------------------------------------ transition #332 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #333 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #334 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #335 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #336 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #337 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #338 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
------------------------------------------------------ transition #339 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
      [10 insn w/o sources]
------------------------------------------------------ transition #340 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #341 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [17 insn w/o sources]
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
  rtems/Mutex.java:90            : nestCount++;
------------------------------------------------------ transition #342 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:90            : nestCount++;
------------------------------------------------------ transition #343 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:90            : nestCount++;
  rtems/Mutex.java:91            : thisThread.resourceCount++;
------------------------------------------------------ transition #344 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:91            : thisThread.resourceCount++;
------------------------------------------------------ transition #345 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:91            : thisThread.resourceCount++;
  rtems/Mutex.java:92            : }
  rtems/Mutex.java:93            : }
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #346 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #347 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
------------------------------------------------------ transition #348 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
  harness/TestThread.java:22     : locks[i].lock();
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #349 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
------------------------------------------------------ transition #350 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
  rtems/Mutex.java:35            : synchronized(globalLock) {
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:36            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
------------------------------------------------------ transition #351 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:37            : while((holder!=null) && (holder!=thisThread))
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
------------------------------------------------------ transition #352 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:75            : System.out.println("thread-id:"+ thisThread.getId() + " acquiring mutex "+ id);
      [2 insn w/o sources]
  rtems/Mutex.java:76            : assert thisThread.getState() != Thread.State.WAITING;
      [9 insn w/o sources]
  rtems/Mutex.java:76            : assert thisThread.getState() != Thread.State.WAITING;
  rtems/Mutex.java:77            : if(holder==null)
------------------------------------------------------ transition #353 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:77            : if(holder==null)
  rtems/Mutex.java:79            : holder = thisThread;
------------------------------------------------------ transition #354 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:79            : holder = thisThread;
  rtems/Mutex.java:80            : assert nestCount==0;
------------------------------------------------------ transition #355 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:80            : assert nestCount==0;
  rtems/Mutex.java:82            : if(nestCount==0)
------------------------------------------------------ transition #356 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:82            : if(nestCount==0)
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
------------------------------------------------------ transition #357 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
      [10 insn w/o sources]
------------------------------------------------------ transition #358 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #359 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [15 insn w/o sources]
------------------------------------------------------ transition #360 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
  rtems/Mutex.java:84            : assert !(thisThread.mutexOrderList.contains(this));
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
------------------------------------------------------ transition #361 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:85            : System.out.println("thread: "+thisThread.getId() + "adding mutex: "+ id + " to its mutexOrderList");
      [2 insn w/o sources]
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
------------------------------------------------------ transition #362 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
------------------------------------------------------ transition #363 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:86            : priorityBefore = thisThread.currentPriority;
  rtems/Mutex.java:87            : thisThread.mutexOrderList.add(0, this);
------------------------------------------------------ transition #364 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:87            : thisThread.mutexOrderList.add(0, this);
      [6 insn w/o sources]
------------------------------------------------------ transition #365 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #366 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #367 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
------------------------------------------------------ transition #368 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #369 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #370 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #371 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #372 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #373 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #374 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #375 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #376 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #377 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [2 insn w/o sources]
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
------------------------------------------------------ transition #378 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
      [10 insn w/o sources]
------------------------------------------------------ transition #379 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #380 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [17 insn w/o sources]
  rtems/Mutex.java:88            : assert thisThread.mutexOrderList.contains(this);
  rtems/Mutex.java:90            : nestCount++;
------------------------------------------------------ transition #381 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:90            : nestCount++;
------------------------------------------------------ transition #382 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:90            : nestCount++;
  rtems/Mutex.java:91            : thisThread.resourceCount++;
------------------------------------------------------ transition #383 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:91            : thisThread.resourceCount++;
------------------------------------------------------ transition #384 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:91            : thisThread.resourceCount++;
  rtems/Mutex.java:92            : }
  rtems/Mutex.java:93            : }
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
------------------------------------------------------ transition #385 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:21     : for (int i = 0; i < idx.length; i++) {
  harness/TestThread.java:24     : for (int i = idx.length-1; i>= 0; i--) {
------------------------------------------------------ transition #386 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:24     : for (int i = idx.length-1; i>= 0; i--) {
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #387 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #388 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
  rtems/Mutex.java:96            : synchronized(globalLock) {
------------------------------------------------------ transition #389 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
  rtems/Mutex.java:96            : synchronized(globalLock) {
------------------------------------------------------ transition #390 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
  rtems/Mutex.java:96            : synchronized(globalLock) {
  rtems/Mutex.java:97            : Mutex topMutex=null;
  rtems/Mutex.java:98            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:98            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:101           : assert nestCount>0;
------------------------------------------------------ transition #391 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:101           : assert nestCount>0;
  rtems/Mutex.java:102           : assert thisThread.resourceCount>0;
------------------------------------------------------ transition #392 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:102           : assert thisThread.resourceCount>0;
  rtems/Mutex.java:103           : nestCount--;
------------------------------------------------------ transition #393 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:103           : nestCount--;
------------------------------------------------------ transition #394 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:103           : nestCount--;
  rtems/Mutex.java:104           : thisThread.resourceCount--;
------------------------------------------------------ transition #395 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:104           : thisThread.resourceCount--;
------------------------------------------------------ transition #396 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:104           : thisThread.resourceCount--;
  rtems/Mutex.java:105           : if(nestCount==0)
------------------------------------------------------ transition #397 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:105           : if(nestCount==0)
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
------------------------------------------------------ transition #398 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
      [6 insn w/o sources]
------------------------------------------------------ transition #399 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #400 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
  rtems/Mutex.java:108           : assert this==topMutex;
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
------------------------------------------------------ transition #401 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
      [6 insn w/o sources]
------------------------------------------------------ transition #402 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #403 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #404 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #405 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #406 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [10 insn w/o sources]
------------------------------------------------------ transition #407 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #408 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #409 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #410 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #411 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [3 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
------------------------------------------------------ transition #412 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:113           : thisThread.setPriority(priorityBefore);
------------------------------------------------------ transition #413 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:113           : thisThread.setPriority(priorityBefore);
      [15 insn w/o sources]
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
------------------------------------------------------ transition #414 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
------------------------------------------------------ transition #415 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [3 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
------------------------------------------------------ transition #416 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:116           : validator();
  rtems/Mutex.java:141           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:141           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
------------------------------------------------------ transition #417 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
      [25 insn w/o sources]
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
  rtems/Mutex.java:143           : while (mItr.hasNext()){
      [7 insn w/o sources]
------------------------------------------------------ transition #418 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
  rtems/Mutex.java:143           : while (mItr.hasNext()){
  rtems/Mutex.java:144           : chkMtx = mItr.next();
      [5 insn w/o sources]
------------------------------------------------------ transition #419 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [14 insn w/o sources]
------------------------------------------------------ transition #420 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #421 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [18 insn w/o sources]
  rtems/Mutex.java:144           : chkMtx = mItr.next();
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
      [2 insn w/o sources]
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
      [2 insn w/o sources]
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
------------------------------------------------------ transition #422 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
      [2 insn w/o sources]
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
      [2 insn w/o sources]
  rtems/Mutex.java:145           : System.out.println("--->Mutex: "+chkMtx.id);
      [2 insn w/o sources]
  rtems/Mutex.java:146           : chkThr = chkMtx.waitQueue.peek();
------------------------------------------------------ transition #423 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:146           : chkThr = chkMtx.waitQueue.peek();
      [2 insn w/o sources]
------------------------------------------------------ transition #424 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:146           : chkThr = chkMtx.waitQueue.peek();
  rtems/Mutex.java:147           : if(chkThr!=null)
  rtems/Mutex.java:143           : while (mItr.hasNext()){
      [7 insn w/o sources]
------------------------------------------------------ transition #425 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:143           : while (mItr.hasNext()){
  rtems/Mutex.java:155           : }
  rtems/Mutex.java:117           : assert holder!=null;
------------------------------------------------------ transition #426 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:117           : assert holder!=null;
  rtems/Mutex.java:118           : assert holder.wait==null;
------------------------------------------------------ transition #427 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:118           : assert holder.wait==null;
------------------------------------------------------ transition #428 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:118           : assert holder.wait==null;
  rtems/Mutex.java:119           : assert holder.trylock==null;
------------------------------------------------------ transition #429 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:119           : assert holder.trylock==null;
------------------------------------------------------ transition #430 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:119           : assert holder.trylock==null;
  rtems/Mutex.java:121           : holder = waitQueue.poll();
------------------------------------------------------ transition #431 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:121           : holder = waitQueue.poll();
      [2 insn w/o sources]
------------------------------------------------------ transition #432 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
  rtems/Mutex.java:121           : holder = waitQueue.poll();
------------------------------------------------------ transition #433 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:121           : holder = waitQueue.poll();
  rtems/Mutex.java:122           : if(holder != null){
------------------------------------------------------ transition #434 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:122           : if(holder != null){
  rtems/Mutex.java:130           : }
  rtems/Mutex.java:131           : }
  harness/TestThread.java:24     : for (int i = idx.length-1; i>= 0; i--) {
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #435 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
------------------------------------------------------ transition #436 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/3,isCascaded:false}
  harness/TestThread.java:25     : locks[i].unlock();
  rtems/Mutex.java:96            : synchronized(globalLock) {
------------------------------------------------------ transition #437 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/3,isCascaded:false}
  rtems/Mutex.java:96            : synchronized(globalLock) {
------------------------------------------------------ transition #438 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
  rtems/Mutex.java:96            : synchronized(globalLock) {
  rtems/Mutex.java:97            : Mutex topMutex=null;
  rtems/Mutex.java:98            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:98            : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:101           : assert nestCount>0;
------------------------------------------------------ transition #439 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:101           : assert nestCount>0;
  rtems/Mutex.java:102           : assert thisThread.resourceCount>0;
------------------------------------------------------ transition #440 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:102           : assert thisThread.resourceCount>0;
  rtems/Mutex.java:103           : nestCount--;
------------------------------------------------------ transition #441 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:103           : nestCount--;
------------------------------------------------------ transition #442 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:103           : nestCount--;
  rtems/Mutex.java:104           : thisThread.resourceCount--;
------------------------------------------------------ transition #443 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:104           : thisThread.resourceCount--;
------------------------------------------------------ transition #444 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:104           : thisThread.resourceCount--;
  rtems/Mutex.java:105           : if(nestCount==0)
------------------------------------------------------ transition #445 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:105           : if(nestCount==0)
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
------------------------------------------------------ transition #446 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
      [6 insn w/o sources]
------------------------------------------------------ transition #447 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #448 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:107           : topMutex = thisThread.mutexOrderList.get(0);
  rtems/Mutex.java:108           : assert this==topMutex;
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
------------------------------------------------------ transition #449 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
      [6 insn w/o sources]
------------------------------------------------------ transition #450 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #451 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #452 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #453 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #454 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [10 insn w/o sources]
------------------------------------------------------ transition #455 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #456 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #457 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:109           : topMutex = thisThread.mutexOrderList.remove(0);
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [3 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
------------------------------------------------------ transition #458 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:112           : System.out.println("Holder Thread: "+thisThread.getId()+"before resetting priority_before : "+ thisThread.getPriority()+" while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:113           : thisThread.setPriority(priorityBefore);
------------------------------------------------------ transition #459 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:113           : thisThread.setPriority(priorityBefore);
      [15 insn w/o sources]
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
------------------------------------------------------ transition #460 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
------------------------------------------------------ transition #461 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:114           : thisThread.currentPriority = priorityBefore;
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [3 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
------------------------------------------------------ transition #462 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:115           : System.out.println("Holder Thread: "+thisThread.getId()+ " after stepdown ops-->current priority: " + thisThread.getPriority() + " while releasing mutex: " + id);
      [2 insn w/o sources]
  rtems/Mutex.java:116           : validator();
  rtems/Mutex.java:141           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
      [2 insn w/o sources]
  rtems/Mutex.java:141           : RTEMSThread thisThread = (RTEMSThread)Thread.currentThread();
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
------------------------------------------------------ transition #463 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
      [25 insn w/o sources]
  rtems/Mutex.java:142           : Iterator<Mutex> mItr = thisThread.mutexOrderList.iterator();
  rtems/Mutex.java:143           : while (mItr.hasNext()){
      [7 insn w/o sources]
------------------------------------------------------ transition #464 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [5 insn w/o sources]
  rtems/Mutex.java:143           : while (mItr.hasNext()){
  rtems/Mutex.java:155           : }
  rtems/Mutex.java:117           : assert holder!=null;
------------------------------------------------------ transition #465 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:117           : assert holder!=null;
  rtems/Mutex.java:118           : assert holder.wait==null;
------------------------------------------------------ transition #466 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:118           : assert holder.wait==null;
------------------------------------------------------ transition #467 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:118           : assert holder.wait==null;
  rtems/Mutex.java:119           : assert holder.trylock==null;
------------------------------------------------------ transition #468 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:119           : assert holder.trylock==null;
------------------------------------------------------ transition #469 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:119           : assert holder.trylock==null;
  rtems/Mutex.java:121           : holder = waitQueue.poll();
------------------------------------------------------ transition #470 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:121           : holder = waitQueue.poll();
      [2 insn w/o sources]
------------------------------------------------------ transition #471 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
      [4 insn w/o sources]
  rtems/Mutex.java:121           : holder = waitQueue.poll();
------------------------------------------------------ transition #472 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:121           : holder = waitQueue.poll();
  rtems/Mutex.java:122           : if(holder != null){
------------------------------------------------------ transition #473 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  rtems/Mutex.java:122           : if(holder != null){
  rtems/Mutex.java:130           : }
  rtems/Mutex.java:131           : }
  harness/TestThread.java:24     : for (int i = idx.length-1; i>= 0; i--) {
  harness/TestThread.java:27     : assert currentPriority==realPriority;
------------------------------------------------------ transition #474 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:27     : assert currentPriority==realPriority;
------------------------------------------------------ transition #475 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  harness/TestThread.java:27     : assert currentPriority==realPriority;
  harness/TestThread.java:28     : }
  harness/TestThread.java:4      : 
------------------------------------------------------ transition #476 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"TERMINATE" ,2/2,isCascaded:false}
  rtems/Mutex.java:92            : }

====================================================== snapshot #1
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at java.lang.Thread.start(Thread.java)
	at harness.Environment.main(Environment.java:48)

thread harness.TestThread:{id:3,name:Thread-3,status:RUNNING,priority:1,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at rtems.Mutex.lock(Mutex.java:92)
	at harness.TestThread.run(TestThread.java:22)


====================================================== results
error #1: gov.nasa.jpf.vm.NoUncaughtExceptionsProperty "java.lang.AssertionError  at rtems.Mutex.updateRec..."

====================================================== statistics
elapsed time:       00:01:18
states:             new=187989,visited=464352,backtracked=651864,end=186814
search:             maxDepth=743,constraints=0
choice generators:  thread=186823 (signal=932,lock=14352,sharedRef=148657,threadApi=766,reschedule=22116), data=0
heap:               new=68106,released=684882,maxLive=507,gcCycles=637048
instructions:       4074115
max memory:         354MB
loaded code:        classes=82,methods=1822

====================================================== search finished: 7/5/15 10:40 PM
]0;saurabh@saurabh-Inspiron-N5010: ~/model_checking/new2-lockmodel/lock-modelsaurabh@saurabh-Inspiron-N5010:~/model_checking/new2-lockmodel/lock-model$ exit
exit

Script done on Sun 05 Jul 2015 10:41:14 PM PDT
